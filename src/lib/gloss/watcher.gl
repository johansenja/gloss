# frozen_string_literal: true

require "listen"

module Gloss
  class Watcher
    def initialize(@paths : Array[String])
      @paths = [File.join(Dir.pwd, Config.src_dir)] if @paths.empty?
    end

    def watch
      puts "=====> Now listening for changes in #{@paths.join(', ')}"
      listener = Listen.to(*@paths, latency: 2, only: /\.gl$/) do |modified, added, removed|
        (modified + added).each do |f|
          puts "====> Rewriting #{f}"
          content = File.read(f)
          Writer.new(
            Builder.new(
              Parser.new(
                content
              ).run
            ).run, f
          ).run

          puts "====> Done"
        end
        removed.each do |f|
          out_path = Utils.src_path_to_output_path(f)
          puts "====> Removing #{out_path}"
          File.delete out_path if File.exist? out_path

          puts "====> Done"
        end
      end
      listener.start
      begin
        loop { sleep 10 }
      rescue Interrupt
        puts "=====> Interrupt signal received, shutting down"
        exit 0
      end
    end
  end
end
