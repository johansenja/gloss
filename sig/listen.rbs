module Listen
  # Listens to file system modifications on a either single directory or
  # multiple directories.
  #
  # @param (see Listen::Listener#new)
  #
  # @yield [modified, added, removed] the changed files
  # @yieldparam [Array<String>] modified the list of modified files
  # @yieldparam [Array<String>] added the list of added files
  # @yieldparam [Array<String>] removed the list of removed files
  #
  # @return [Listen::Listener] the listener
  #
  def self.to: (*String dirs,
                ?debug: bool,
                ?wait_for_delay: Integer?,
                ?relative: bool,
                ?force_polling: bool,
                ?ignore: Regexp | Array[Regexp],
                ?ignore!: Regexp,
                ?only: Regexp?,
                ?polling_fallback_message: String?) {
                  (Array[String] modified, Array[String] added, Array[String] removed) -> void
                } -> Listener

  class Listener
    # Starts processing events and starts adapters
    # or resumes invoking callbacks if paused
    def start: () -> void

    # Stops both listening for events and processing them
    def stop: () -> void

    # Stops invoking callbacks (messages pile up)
    def pause: () -> void

    # processing means callbacks are called
    def processing?: () -> bool

    def paused?: () -> bool

    def ignore: (Regexp regexps) -> void

    def ignore!: (Regexp regexps) -> void

    def only: (Regexp regexps) -> void
  end
end
