# frozen_string_literal: true

##### This file was generated by Gloss; any changes made here will be overwritten.
##### See src/ to make changes

module Gloss
  class TypeChecker
    Project = Struct.new(:"targets")
    attr_reader(:"steep_target", :"top_level_decls")
    def initialize()
      @steep_target = Steep::Project::Target.new(name: "gloss", options:       Steep::Project::Options.new
.tap { |o|
        o.allow_unknown_constant_assignment=(true)
      }, source_patterns: ["gloss.rb"], ignore_patterns:       Array.new, signature_patterns: ["sig"])
      @top_level_decls = {}
    end
    def run(rb_str)
      unless       check_types(rb_str)
        raise(Errors::TypeError, @steep_target.errors
.map { |e|
case e
            when Steep::Errors::NoMethod
              "Unknown method :#{e.method}, location: #{e.type
.location
.inspect}"
            when Steep::Errors::MethodBodyTypeMismatch
              "Invalid method body type - expected: #{e.expected}, actual: #{e.actual}"
            when Steep::Errors::IncompatibleArguments
              "  Invalid argmuents - method type: #{e.method_type}\n                      method name: #{e.method_type
.method_decls
.first
.method_name}"
            when Steep::Errors::ReturnTypeMismatch
              "Invalid return type - expected: #{e.expected}, actual: #{e.actual}"
            when Steep::Errors::IncompatibleAssignment
              "Invalid assignment - cannot assign #{e.rhs_type} to type #{e.lhs_type}"
          end
        }
.join("\n"))
      end
true
    end
    def check_types(rb_str)
      env_loader = RBS::EnvironmentLoader.new
      env = RBS::Environment.from_loader(env_loader)
      project = Steep::Project.new(steepfile_path:       Pathname.new(Config.src_dir)
.realpath)
      project.targets
.<<(@steep_target)
      loader = Steep::Project::FileLoader.new(project: project)
      loader.load_signatures
      @steep_target.add_source("gloss.rb", rb_str)
      @top_level_decls.each { |_, decl|
        env.<<(decl)
      }
      env = env.resolve_type_names
      @steep_target.instance_variable_set("@environment", env)
      @steep_target.type_check
@steep_target.status
.is_a?(Steep::Project::Target::TypeCheckStatus) && @steep_target.no_error? && @steep_target.errors
.empty?
    end
  end
end
