require "listen"

module Gloss
  class Watcher
    @listener: Listen?

    def initialize(@paths : Array[String])
      if @paths.empty?
        @paths = [File.join(Dir.pwd, Config.src_dir)]
        # either any filepath with .gl extension, or executable with extension
        @only = /(?:(\.gl|(?:(?<=\/)[^\.\/]+))\z|\A[^\.\/]+\z)/
      else
        file_names = Array.new
        paths = Array.new
        @paths.each do |pa|
          pn = Pathname.new(pa)
          paths << pn.parent.to_s
          file_names << (pn.file? ? pn.basename.to_s : pa)
        end
        @paths = paths.uniq
        @only = /#{Regexp.union(file_names)}/
      end
    end

    def watch
      Gloss.logger.info "Now listening for changes in #{@paths.join(', ')}"
      @listener ||= Listen.to(
        *@paths,
        latency: 2,
        only: @only
      ) do |modified, added, removed|
        (modified + added).each do |f|
          Gloss.logger.info "Rewriting #{f}"
          content = File.read(f)
          err = catch :error do
            Writer.new(
              Visitor.new(
                Parser.new(
                  content
                ).run
              ).run, f
            ).run
            nil
          end
          if err
            Gloss.logger.error err
          else
            Gloss.logger.info "Done"
          end
        end
        removed.each do |f|
          out_path = Utils.src_path_to_output_path(f)
          Gloss.logger.info "Removing #{out_path}"
          File.delete out_path if File.exist? out_path

          Gloss.logger.info "Done"
        end
      end
      begin
        @listener.start
        sleep
      rescue Interrupt
        kill
      end
    end

    def kill
      Gloss.logger.info "Interrupt signal received, shutting down"
      @listener.stop if @listener
    end
  end
end
