# frozen_string_literal: true

require "listen"

module Gloss
  class Watcher
    def initialize(@paths : Array[String])
      if @paths.empty?
        @paths = [File.join(Dir.pwd, Config.src_dir)]
        @only = /\.gl$/
      else
        file_names = Array.new
        paths = Array.new
        @paths.each do |pa|
          pn = Pathname.new(pa)
          paths << pn.parent.to_s
          file_names << (pn.file? ? pn.basename.to_s : pa)
        end
        @paths = paths.uniq
        @only = /#{Regexp.union(file_names)}/
      end
    end

    def watch
      puts "=====> Now listening for changes in #{@paths.join(', ')}"
      listener = Listen.to(
        *@paths,
        latency: 2,
        only: @only
      ) do |modified, added, removed|
        (modified + added).each do |f|
          puts "====> Rewriting #{f}"
          content = File.read(f)
          Writer.new(
            Builder.new(
              Parser.new(
                content
              ).run
            ).run, f
          ).run

          puts "====> Done"
        end
        removed.each do |f|
          out_path = Utils.src_path_to_output_path(f)
          puts "====> Removing #{out_path}"
          File.delete out_path if File.exist? out_path

          puts "====> Done"
        end
      end
      begin
        listener.start
        sleep
      rescue Interrupt
        puts "=====> Interrupt signal received, shutting down"
        exit 0
      end
    end
  end
end
