  # frozen_string_literal: true

  ##### This file was generated by Gloss; any changes made here will be overwritten.
  ##### See src/ to make changes

require "listen"
module Gloss
  class Watcher
    def initialize(paths)
      @paths = paths
      (if @paths.empty?
        @paths = [File.join(Dir.pwd, Config.src_dir)]
        @only = /\.gl$/
      else
        file_names = Array.new
        paths = Array.new
        @paths.each() { |pa|
          pn = Pathname.new(pa)
          paths.<<(pn.parent
.to_s)
          file_names.<<((if pn.file?
            pn.basename
.to_s
          else
            pa
          end))
        }
        @paths = paths.uniq
        @only = /#{Regexp.union(file_names)}/
      end)
    end
    def watch()
      puts("=====> Now listening for changes in #{@paths.join(", ")}")
      listener = Listen.to(*@paths, latency: 2, only: @only) { |modified, added, removed|
        modified.+(added)
.each() { |f|
          puts("====> Rewriting #{f}")
          content = File.read(f)
          Writer.new(Builder.new(Parser.new(content)
.run)
.run, f)
.run
          puts("====> Done")
        }
        removed.each() { |f|
          out_path = Utils.src_path_to_output_path(f)
          puts("====> Removing #{out_path}")
          (if File.exist?(out_path)
            File.delete(out_path)
          end)
          puts("====> Done")
        }
      }
      begin
        listener.start
        sleep
      rescue Interrupt
        puts("=====> Interrupt signal received, shutting down")
        exit(0)
      end
    end
  end
end
