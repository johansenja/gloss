module Gloss
  module Utils
    module_function

    def full_path(path) : String
      pn = Pathname.new(path)
      if pn.absolute?
        pn.to_s
      else
        fp = File.join(Dir.pwd, path)
        if File.exist? fp
          fp
        else
          throw :error, "File path #{path} does not exist (also looked for #{fp})"
        end
      end
    end
  end

  class ProgLoader
    include Utils

    def initialize
      @files_to_process = [full_path(Config.entrypoint)]
      @processed_files = Set.new
      @type_checker = TypeChecker.new
    end

    def run
      @files_to_process.each do |path_string|
        next if @processed_files.has? path_string

        Gloss.logger.debug "Loading #{path_string}"
        path = path_from_string(path_string)
        file_contents = File.open(path).read
        contents_tree = Parser.new(file_contents).run
        Builder.new(contents_tree, @type_checker).run do |filepath|
          @files_to_process << filepath
        end
        @processed_files.add path_string
      end

      @type_checker
    end
  end
end
